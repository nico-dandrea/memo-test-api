#DEFINITION

type MemoTest {
  id: ID!
  name: String!
  images: [MemoTestImage!]! @hasMany
  sessions: [GameSession!]! @hasMany
  maxScore: GameSession @hasOne
  created_at: DateTime!
  updated_at: DateTime!
}

type MemoTestImage {
  id: ID!
  image_url: String!
  memo_test: MemoTest! @belongsTo
  created_at: DateTime!
  updated_at: DateTime!
}

#CREATE

input CreateMemoTestInput {
  name: String! @rules(apply: [ "required", "string", "min:4", "max:100", "unique:memo_tests,name"])
  images: UpdateImagesHasMany
}

input CreateImageInput @validator {
  #We use 'ends_with' because for some reasone extensions doesn't work properly
  image_url: String! @rules(apply: [ "required", "ends_with:.jpg,.jpeg,.png"])
}

# UPDATE

input UpdateMemoTestInput {
  id: ID! @rules(apply: [ "required", "exists:memo_tests,id"])
  name: String @rules(apply: [ "sometimes", "string", "unique:memo_tests,name"])
  images: UpdateImagesHasMany
}

# As it was similar to this, we didn't create a CreateImagesHasMany input
input UpdateImagesHasMany {
  create: [CreateImageInput!] 
  update: [UpdateImageInput!]
  delete: [ID!] @rules(apply: [ "exists:memo_test_images,id"])
  #TODO: Make memo_test images a many to many
}

input UpdateImageInput @validator {
  id: ID! @rules(apply: [ "required", "exists:memo_test_images,id"])
  image_url: String! @rules(apply: [ "required", "ends_with:.jpg,.jpeg,.png"])
}